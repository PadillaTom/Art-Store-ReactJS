{"ast":null,"code":"import { LOAD_PRODUCTS, SET_LISTVIEW, SET_GRIDVIEW, UPDATE_SORT, SORT_PRODUCTS, UPDATE_FILTERS, FILTER_PRODUCTS, CLEAR_FILTERS } from \"../actions\";\n\nconst filter_reducer = (state, action) => {\n  if (action.type === LOAD_PRODUCTS) {\n    // Max Price of ALL Products:\n    let maxPrice = action.payload.map(p => p.price);\n    maxPrice = Math.max(...maxPrice);\n    return { ...state,\n      all_products: [...action.payload],\n      filtered_products: [...action.payload],\n      filters: { ...state.filters,\n        max_price: maxPrice,\n        price: maxPrice\n      }\n    };\n  }\n\n  if (action.type === SET_GRIDVIEW) {\n    return { ...state,\n      isGrid: true\n    };\n  }\n\n  if (action.type === SET_LISTVIEW) {\n    return { ...state,\n      isGrid: false\n    };\n  }\n\n  if (action.type === UPDATE_SORT) {\n    return { ...state,\n      sortType: action.payload\n    };\n  }\n\n  if (action.type === SORT_PRODUCTS) {\n    const {\n      sortType,\n      filtered_products\n    } = state;\n    let tempProducts = [...filtered_products];\n\n    if (sortType === \"price-asc\") {\n      tempProducts = tempProducts.sort((a, b) => {\n        return a.price - b.price;\n      });\n    }\n\n    if (sortType === \"price-desc\") {\n      tempProducts = tempProducts.sort((a, b) => {\n        return b.price - a.price;\n      });\n    }\n\n    if (sortType === \"name-a\") {\n      tempProducts = tempProducts.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n      });\n    }\n\n    if (sortType === \"name-z\") {\n      tempProducts = tempProducts.sort((a, b) => {\n        return b.name.localeCompare(a.name);\n      });\n    }\n\n    return { ...state,\n      filtered_products: tempProducts\n    };\n  }\n\n  if (action.type === UPDATE_FILTERS) {\n    const {\n      filterName,\n      inputValue\n    } = action.payload;\n    return { ...state,\n      filters: { ...state.filters,\n        [filterName]: inputValue\n      }\n    };\n  }\n\n  if (action.type === FILTER_PRODUCTS) {\n    const {\n      all_products\n    } = state;\n    let tempProducts = [...all_products];\n    return { ...state,\n      filtered_products: tempProducts\n    };\n  }\n\n  if (action.type === CLEAR_FILTERS) {\n    return { ...state,\n      filters: { ...state.filters,\n        text: \"\",\n        company: \"all\",\n        category: \"all\",\n        color: \"all\",\n        price: state.filters.max_price,\n        shipping: false\n      }\n    };\n  }\n\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default filter_reducer;","map":{"version":3,"sources":["/Users/padillatom/PadillaTom/Tomas/Programacion/Practice Projects/React JS/Art&Store/src/Reducers/filter_reducer.js"],"names":["LOAD_PRODUCTS","SET_LISTVIEW","SET_GRIDVIEW","UPDATE_SORT","SORT_PRODUCTS","UPDATE_FILTERS","FILTER_PRODUCTS","CLEAR_FILTERS","filter_reducer","state","action","type","maxPrice","payload","map","p","price","Math","max","all_products","filtered_products","filters","max_price","isGrid","sortType","tempProducts","sort","a","b","name","localeCompare","filterName","inputValue","text","company","category","color","shipping","Error"],"mappings":"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","sourcesContent":["import {\n  LOAD_PRODUCTS,\n  SET_LISTVIEW,\n  SET_GRIDVIEW,\n  UPDATE_SORT,\n  SORT_PRODUCTS,\n  UPDATE_FILTERS,\n  FILTER_PRODUCTS,\n  CLEAR_FILTERS,\n} from \"../actions\";\n\nconst filter_reducer = (state, action) => {\n  if (action.type === LOAD_PRODUCTS) {\n    // Max Price of ALL Products:\n    let maxPrice = action.payload.map((p) => p.price);\n    maxPrice = Math.max(...maxPrice);\n    return {\n      ...state,\n      all_products: [...action.payload],\n      filtered_products: [...action.payload],\n      filters: {\n        ...state.filters,\n        max_price: maxPrice,\n        price: maxPrice,\n      },\n    };\n  }\n  if (action.type === SET_GRIDVIEW) {\n    return {\n      ...state,\n      isGrid: true,\n    };\n  }\n  if (action.type === SET_LISTVIEW) {\n    return {\n      ...state,\n      isGrid: false,\n    };\n  }\n  if (action.type === UPDATE_SORT) {\n    return {\n      ...state,\n      sortType: action.payload,\n    };\n  }\n  if (action.type === SORT_PRODUCTS) {\n    const { sortType, filtered_products } = state;\n    let tempProducts = [...filtered_products];\n    if (sortType === \"price-asc\") {\n      tempProducts = tempProducts.sort((a, b) => {\n        return a.price - b.price;\n      });\n    }\n    if (sortType === \"price-desc\") {\n      tempProducts = tempProducts.sort((a, b) => {\n        return b.price - a.price;\n      });\n    }\n    if (sortType === \"name-a\") {\n      tempProducts = tempProducts.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n      });\n    }\n    if (sortType === \"name-z\") {\n      tempProducts = tempProducts.sort((a, b) => {\n        return b.name.localeCompare(a.name);\n      });\n    }\n    return { ...state, filtered_products: tempProducts };\n  }\n  if (action.type === UPDATE_FILTERS) {\n    const { filterName, inputValue } = action.payload;\n    return {\n      ...state,\n      filters: { ...state.filters, [filterName]: inputValue },\n    };\n  }\n  if (action.type === FILTER_PRODUCTS) {\n    const { all_products } = state;\n    let tempProducts = [...all_products];\n\n    return { ...state, filtered_products: tempProducts };\n  }\n  if (action.type === CLEAR_FILTERS) {\n    return {\n      ...state,\n      filters: {\n        ...state.filters,\n        text: \"\",\n        company: \"all\",\n        category: \"all\",\n        color: \"all\",\n        price: state.filters.max_price,\n        shipping: false,\n      },\n    };\n  }\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default filter_reducer;\n"]},"metadata":{},"sourceType":"module"}