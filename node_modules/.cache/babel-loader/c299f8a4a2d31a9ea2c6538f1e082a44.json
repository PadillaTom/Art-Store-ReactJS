{"ast":null,"code":"import { ADD_TO_CART, CLEAR_CART, COUNT_CART_TOTALS, REMOVE_CART_ITEM, TOGGLE_CART_ITEM_AMOUNT } from \"../actions\";\n\nconst cart_reducer = (state, action) => {\n  if (action.type === ADD_TO_CART) {\n    const {\n      id,\n      color,\n      amount,\n      product\n    } = action.payload; // Is on cart already?\n\n    const tempItem = state.cart.find(cartItem => {\n      return cartItem.id === id + color;\n    });\n\n    if (tempItem) {\n      // IS in cart:\n      const tempCart = state.cart.map(cartItem => {\n        if (cartItem.id === id + color) {\n          // Add to Amount:\n          let newAmount = cartItem.amount + amount; // Amount bigger than Stock = set it to the Max Stock possible:\n\n          if (newAmount > cartItem.max) {\n            newAmount = cartItem.max;\n          }\n\n          return { ...cartItem,\n            amount: newAmount\n          };\n        } else {\n          return cartItem;\n        }\n      });\n      return { ...state,\n        cart: tempCart\n      };\n    } else {\n      // NOT in cart: Creamos el Item y lo agregamos al Array\n      const newItem = {\n        id: id + color,\n        name: product.name,\n        color,\n        amount,\n        image: product.images[0].url,\n        price: product.price,\n        max: product.stock\n      };\n      return { ...state,\n        cart: [...state.cart, newItem]\n      };\n    }\n  }\n\n  if (action.type === REMOVE_CART_ITEM) {\n    const tempCart = state.cart.filter(item => {\n      return item.id !== action.payload;\n    });\n    return { ...state,\n      cart: tempCart\n    };\n  }\n\n  if (action.type === CLEAR_CART) {\n    return { ...state,\n      cart: []\n    };\n  }\n\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default cart_reducer;","map":{"version":3,"sources":["/Users/padillatom/PadillaTom/Tomas/Programacion/Practice Projects/React JS/Art&Store/src/Reducers/cart_reducer.js"],"names":["ADD_TO_CART","CLEAR_CART","COUNT_CART_TOTALS","REMOVE_CART_ITEM","TOGGLE_CART_ITEM_AMOUNT","cart_reducer","state","action","type","id","color","amount","product","payload","tempItem","cart","find","cartItem","tempCart","map","newAmount","max","newItem","name","image","images","url","price","stock","filter","item","Error"],"mappings":"AAAA,SACEA,WADF,EAEEC,UAFF,EAGEC,iBAHF,EAIEC,gBAJF,EAKEC,uBALF,QAMO,YANP;;AAQA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,MAAIA,MAAM,CAACC,IAAP,KAAgBR,WAApB,EAAiC;AAC/B,UAAM;AAAES,MAAAA,EAAF;AAAMC,MAAAA,KAAN;AAAaC,MAAAA,MAAb;AAAqBC,MAAAA;AAArB,QAAiCL,MAAM,CAACM,OAA9C,CAD+B,CAG/B;;AACA,UAAMC,QAAQ,GAAGR,KAAK,CAACS,IAAN,CAAWC,IAAX,CAAiBC,QAAD,IAAc;AAC7C,aAAOA,QAAQ,CAACR,EAAT,KAAgBA,EAAE,GAAGC,KAA5B;AACD,KAFgB,CAAjB;;AAGA,QAAII,QAAJ,EAAc;AACZ;AACA,YAAMI,QAAQ,GAAGZ,KAAK,CAACS,IAAN,CAAWI,GAAX,CAAgBF,QAAD,IAAc;AAC5C,YAAIA,QAAQ,CAACR,EAAT,KAAgBA,EAAE,GAAGC,KAAzB,EAAgC;AAC9B;AACA,cAAIU,SAAS,GAAGH,QAAQ,CAACN,MAAT,GAAkBA,MAAlC,CAF8B,CAG9B;;AACA,cAAIS,SAAS,GAAGH,QAAQ,CAACI,GAAzB,EAA8B;AAC5BD,YAAAA,SAAS,GAAGH,QAAQ,CAACI,GAArB;AACD;;AACD,iBAAO,EAAE,GAAGJ,QAAL;AAAeN,YAAAA,MAAM,EAAES;AAAvB,WAAP;AACD,SARD,MAQO;AACL,iBAAOH,QAAP;AACD;AACF,OAZgB,CAAjB;AAcA,aAAO,EAAE,GAAGX,KAAL;AAAYS,QAAAA,IAAI,EAAEG;AAAlB,OAAP;AACD,KAjBD,MAiBO;AACL;AACA,YAAMI,OAAO,GAAG;AACdb,QAAAA,EAAE,EAAEA,EAAE,GAAGC,KADK;AAEda,QAAAA,IAAI,EAAEX,OAAO,CAACW,IAFA;AAGdb,QAAAA,KAHc;AAIdC,QAAAA,MAJc;AAKda,QAAAA,KAAK,EAAEZ,OAAO,CAACa,MAAR,CAAe,CAAf,EAAkBC,GALX;AAMdC,QAAAA,KAAK,EAAEf,OAAO,CAACe,KAND;AAOdN,QAAAA,GAAG,EAAET,OAAO,CAACgB;AAPC,OAAhB;AASA,aAAO,EAAE,GAAGtB,KAAL;AAAYS,QAAAA,IAAI,EAAE,CAAC,GAAGT,KAAK,CAACS,IAAV,EAAgBO,OAAhB;AAAlB,OAAP;AACD;AACF;;AACD,MAAIf,MAAM,CAACC,IAAP,KAAgBL,gBAApB,EAAsC;AACpC,UAAMe,QAAQ,GAAGZ,KAAK,CAACS,IAAN,CAAWc,MAAX,CAAmBC,IAAD,IAAU;AAC3C,aAAOA,IAAI,CAACrB,EAAL,KAAYF,MAAM,CAACM,OAA1B;AACD,KAFgB,CAAjB;AAGA,WAAO,EAAE,GAAGP,KAAL;AAAYS,MAAAA,IAAI,EAAEG;AAAlB,KAAP;AACD;;AACD,MAAIX,MAAM,CAACC,IAAP,KAAgBP,UAApB,EAAgC;AAC9B,WAAO,EAAE,GAAGK,KAAL;AAAYS,MAAAA,IAAI,EAAE;AAAlB,KAAP;AACD;;AACD,QAAM,IAAIgB,KAAJ,CAAW,gBAAexB,MAAM,CAACC,IAAK,iBAAtC,CAAN;AACD,CAjDD;;AAmDA,eAAeH,YAAf","sourcesContent":["import {\n  ADD_TO_CART,\n  CLEAR_CART,\n  COUNT_CART_TOTALS,\n  REMOVE_CART_ITEM,\n  TOGGLE_CART_ITEM_AMOUNT,\n} from \"../actions\";\n\nconst cart_reducer = (state, action) => {\n  if (action.type === ADD_TO_CART) {\n    const { id, color, amount, product } = action.payload;\n\n    // Is on cart already?\n    const tempItem = state.cart.find((cartItem) => {\n      return cartItem.id === id + color;\n    });\n    if (tempItem) {\n      // IS in cart:\n      const tempCart = state.cart.map((cartItem) => {\n        if (cartItem.id === id + color) {\n          // Add to Amount:\n          let newAmount = cartItem.amount + amount;\n          // Amount bigger than Stock = set it to the Max Stock possible:\n          if (newAmount > cartItem.max) {\n            newAmount = cartItem.max;\n          }\n          return { ...cartItem, amount: newAmount };\n        } else {\n          return cartItem;\n        }\n      });\n\n      return { ...state, cart: tempCart };\n    } else {\n      // NOT in cart: Creamos el Item y lo agregamos al Array\n      const newItem = {\n        id: id + color,\n        name: product.name,\n        color,\n        amount,\n        image: product.images[0].url,\n        price: product.price,\n        max: product.stock,\n      };\n      return { ...state, cart: [...state.cart, newItem] };\n    }\n  }\n  if (action.type === REMOVE_CART_ITEM) {\n    const tempCart = state.cart.filter((item) => {\n      return item.id !== action.payload;\n    });\n    return { ...state, cart: tempCart };\n  }\n  if (action.type === CLEAR_CART) {\n    return { ...state, cart: [] };\n  }\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default cart_reducer;\n"]},"metadata":{},"sourceType":"module"}