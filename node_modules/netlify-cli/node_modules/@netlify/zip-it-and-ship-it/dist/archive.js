var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { createWriteStream } = require('fs');
const { promisify } = require('util');
const archiver = require('archiver');
const endOfStream = require('end-of-stream');
const pEndOfStream = promisify(endOfStream);
// Start zipping files
const startZip = function (destPath) {
    const output = createWriteStream(destPath);
    const archive = archiver('zip', { level: ZIP_LEVEL });
    archive.pipe(output);
    return { archive, output };
};
const ZIP_LEVEL = 9;
// Add new file to zip
const addZipFile = function (archive, file, name, stat) {
    // Ensure sha256 stability regardless of mtime
    archive.file(file, { name, mode: stat.mode, date: new Date(0), stats: stat });
};
// Add new file content to zip
const addZipContent = function (archive, content, name) {
    archive.append(content, { name, date: new Date(0) });
};
// End zipping files
const endZip = function (archive, output) {
    return __awaiter(this, void 0, void 0, function* () {
        archive.finalize();
        yield pEndOfStream(output);
    });
};
module.exports = { startZip, addZipFile, addZipContent, endZip };
//# sourceMappingURL=archive.js.map