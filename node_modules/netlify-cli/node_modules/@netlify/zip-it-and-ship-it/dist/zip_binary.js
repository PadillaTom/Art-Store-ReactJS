var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { startZip, addZipFile, addZipContent, endZip } = require('./archive');
// Zip a binary function file
const zipBinary = function ({ srcPath, destPath, filename, stat, runtime }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { archive, output } = startZip(destPath);
        addZipFile(archive, srcPath, filename, stat);
        addZipContent(archive, JSON.stringify({ runtime: runtime.name }), 'netlify-toolchain');
        yield endZip(archive, output);
    });
};
module.exports = { zipBinary };
//# sourceMappingURL=zip_binary.js.map