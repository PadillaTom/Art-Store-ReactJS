var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { join, extname, dirname, basename } = require('path');
const { RUNTIME_RUST } = require('../../utils/consts');
const { cachedLstat, cachedReaddir } = require('../../utils/fs');
const { zipBinary } = require('../../zip_binary');
const { detectBinaryRuntime } = require('../detect_runtime');
const { build } = require('./builder');
const { MANIFEST_NAME } = require('./constants');
const detectRustFunction = ({ fsCache, path }) => __awaiter(this, void 0, void 0, function* () {
    const stat = yield cachedLstat(fsCache, path);
    if (!stat.isDirectory()) {
        return;
    }
    const files = yield cachedReaddir(fsCache, path);
    const hasCargoManifest = files.includes(MANIFEST_NAME);
    if (!hasCargoManifest) {
        return;
    }
    const mainFilePath = join(path, 'src', 'main.rs');
    try {
        const mainFile = yield cachedLstat(fsCache, mainFilePath);
        if (mainFile.isFile()) {
            return mainFilePath;
        }
    }
    catch (_) {
        // no-op
    }
});
const findFunctionsInPaths = function ({ featureFlags, fsCache, paths }) {
    return __awaiter(this, void 0, void 0, function* () {
        const functions = yield Promise.all(paths.map((path) => __awaiter(this, void 0, void 0, function* () {
            const runtime = yield detectBinaryRuntime({ fsCache, path });
            if (runtime === RUNTIME_RUST) {
                return processBinary({ fsCache, path });
            }
            if (featureFlags.buildRustSource !== true) {
                return;
            }
            const rustSourceFile = yield detectRustFunction({ fsCache, path });
            if (rustSourceFile) {
                return processSource({ fsCache, mainFile: rustSourceFile, path });
            }
        })));
        return functions.filter(Boolean);
    });
};
const processBinary = ({ fsCache, path }) => __awaiter(this, void 0, void 0, function* () {
    const stat = yield cachedLstat(fsCache, path);
    const name = basename(path, extname(path));
    return {
        mainFile: path,
        name,
        srcDir: dirname(path),
        srcPath: path,
        stat,
    };
});
const processSource = ({ mainFile, path }) => {
    const functionName = basename(path);
    return {
        mainFile,
        name: functionName,
        srcDir: path,
        srcPath: path,
    };
};
// The name of the binary inside the zip file must always be `bootstrap`
// because they include the Lambda runtime, and that's the name that AWS
// expects for those kind of functions.
const zipFunction = function ({ config, destFolder, filename, mainFile, runtime, srcDir, srcPath, stat }) {
    return __awaiter(this, void 0, void 0, function* () {
        const destPath = join(destFolder, `${filename}.zip`);
        const isSource = extname(mainFile) === '.rs';
        const zipOptions = {
            destPath,
            filename: 'bootstrap',
            runtime,
        };
        // If we're building from source, we first need to build the source and zip
        // the resulting binary. Otherwise, we're dealing with a binary so we zip it
        // directly.
        if (isSource) {
            const { path: binaryPath, stat: binaryStat } = yield build({ config, name: filename, srcDir });
            yield zipBinary(Object.assign(Object.assign({}, zipOptions), { srcPath: binaryPath, stat: binaryStat }));
        }
        else {
            yield zipBinary(Object.assign(Object.assign({}, zipOptions), { srcPath, stat }));
        }
        return { config, path: destPath };
    });
};
module.exports = { findFunctionsInPaths, name: RUNTIME_RUST, zipFunction };
//# sourceMappingURL=index.js.map