var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { detect, Runtime } = require('elf-cam');
const { RUNTIME_GO, RUNTIME_RUST } = require('../utils/consts');
const { cachedReadFile } = require('../utils/fs');
// Try to guess the runtime by inspecting the binary file.
const detectBinaryRuntime = function ({ fsCache, path }) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const buffer = yield cachedReadFile(fsCache, path);
            return RUNTIMES[detect(buffer)];
        }
        catch (error) { }
    });
};
const RUNTIMES = {
    [Runtime.Go]: RUNTIME_GO,
    [Runtime.Rust]: RUNTIME_RUST,
};
module.exports = { detectBinaryRuntime };
//# sourceMappingURL=detect_runtime.js.map