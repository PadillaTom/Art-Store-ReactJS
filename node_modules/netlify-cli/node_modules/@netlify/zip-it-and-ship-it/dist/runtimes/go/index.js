var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { basename, dirname, extname, join } = require('path');
const cpFile = require('cp-file');
const { RUNTIME_GO } = require('../../utils/consts');
const { cachedLstat, cachedReaddir } = require('../../utils/fs');
const { detectBinaryRuntime } = require('../detect_runtime');
const { build } = require('./builder');
const detectGoFunction = ({ fsCache, path }) => __awaiter(this, void 0, void 0, function* () {
    const stat = yield cachedLstat(fsCache, path);
    if (!stat.isDirectory()) {
        return;
    }
    const directoryName = basename(path);
    const files = yield cachedReaddir(fsCache, path);
    const mainFileName = [`${directoryName}.go`, 'main.go'].find((name) => files.includes(name));
    if (mainFileName === undefined) {
        return;
    }
    return mainFileName;
});
const findFunctionsInPaths = function ({ featureFlags, fsCache, paths }) {
    return __awaiter(this, void 0, void 0, function* () {
        const functions = yield Promise.all(paths.map((path) => __awaiter(this, void 0, void 0, function* () {
            const runtime = yield detectBinaryRuntime({ fsCache, path });
            if (runtime === RUNTIME_GO) {
                return processBinary({ fsCache, path });
            }
            if (featureFlags.buildGoSource !== true) {
                return;
            }
            const goSourceFile = yield detectGoFunction({ fsCache, path });
            if (goSourceFile) {
                return processSource({ fsCache, mainFile: goSourceFile, path });
            }
        })));
        return functions.filter(Boolean);
    });
};
const processBinary = ({ fsCache, path }) => __awaiter(this, void 0, void 0, function* () {
    const stat = yield cachedLstat(fsCache, path);
    const name = basename(path, extname(path));
    return {
        mainFile: path,
        name,
        srcDir: dirname(path),
        srcPath: path,
        stat,
    };
});
const processSource = ({ mainFile, path }) => {
    const functionName = basename(path);
    return {
        mainFile: join(path, mainFile),
        name: functionName,
        srcDir: path,
        srcPath: path,
    };
};
const zipFunction = function ({ config, destFolder, filename, mainFile, srcDir, srcPath }) {
    return __awaiter(this, void 0, void 0, function* () {
        const destPath = join(destFolder, filename);
        const isSource = extname(mainFile) === '.go';
        // If we're building a Go function from source, we call the build method and
        // it'll take care of placing the binary in the right location. If not, we
        // need to copy the existing binary file to the destination directory.
        yield (isSource ? build({ destPath, mainFile, srcDir }) : cpFile(srcPath, destPath));
        return { config, path: destPath };
    });
};
module.exports = { findFunctionsInPaths, name: RUNTIME_GO, zipFunction };
//# sourceMappingURL=index.js.map