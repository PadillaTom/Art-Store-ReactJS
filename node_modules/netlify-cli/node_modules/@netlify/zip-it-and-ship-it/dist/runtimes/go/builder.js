var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { basename } = require('path');
const { RUNTIME_GO } = require('../../utils/consts');
const { lstat } = require('../../utils/fs');
const { runCommand } = require('../../utils/shell');
const build = ({ destPath, mainFile, srcDir }) => __awaiter(this, void 0, void 0, function* () {
    const functionName = basename(srcDir);
    try {
        yield runCommand('go', ['build', '-o', destPath, '-ldflags', '-s -w'], {
            cwd: srcDir,
            env: {
                CGO_ENABLED: '0',
                GOOS: 'linux',
            },
        });
    }
    catch (error) {
        error.customErrorInfo = { type: 'functionsBundling', location: { functionName, runtime: RUNTIME_GO } };
        console.error(`Could not compile Go function ${functionName}:\n`);
        throw error;
    }
    const stat = yield lstat(destPath);
    return {
        mainFile,
        name: functionName,
        srcDir,
        srcPath: destPath,
        stat,
    };
});
module.exports = { build };
//# sourceMappingURL=builder.js.map