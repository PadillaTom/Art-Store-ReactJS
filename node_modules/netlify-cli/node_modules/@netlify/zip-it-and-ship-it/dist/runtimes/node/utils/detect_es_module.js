var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { readFile } = require('fs');
const { promisify } = require('util');
const pReadFile = promisify(readFile);
const { init, parse } = require('es-module-lexer');
const detectEsModule = ({ mainFile }) => __awaiter(this, void 0, void 0, function* () {
    if (!mainFile) {
        return false;
    }
    try {
        const [mainFileContents] = yield Promise.all([pReadFile(mainFile, 'utf8'), init]);
        const [imports, exports] = parse(mainFileContents);
        return imports.length !== 0 || exports.length !== 0;
    }
    catch (_a) {
        // If there are any problems with init or parsing, assume it's not an ES module
        return false;
    }
});
module.exports = { detectEsModule };
//# sourceMappingURL=detect_es_module.js.map