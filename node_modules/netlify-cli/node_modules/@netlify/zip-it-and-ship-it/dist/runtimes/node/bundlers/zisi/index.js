var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { dirname, normalize } = require('path');
const { getBasePath } = require('../../utils/base_path');
const { getSrcFiles } = require('./src_files');
const bundle = ({ basePath, config, featureFlags, mainFile, name, pluginsModulesPath, srcDir, srcPath, stat, }) => __awaiter(this, void 0, void 0, function* () {
    const srcFiles = yield getSrcFiles({
        config: Object.assign(Object.assign({}, config), { includedFilesBasePath: config.includedFilesBasePath || basePath }),
        featureFlags,
        mainFile,
        name,
        pluginsModulesPath,
        srcDir,
        srcPath,
        stat,
    });
    const dirnames = srcFiles.map((filePath) => normalize(dirname(filePath)));
    return {
        basePath: getBasePath(dirnames),
        inputs: srcFiles,
        mainFile,
        srcFiles,
    };
});
module.exports = { bundle, getSrcFiles };
//# sourceMappingURL=index.js.map