var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { dirname } = require('path');
const { getModuleName } = require('../../utils/module');
const { getNestedDependencies, handleModuleNotFound } = require('./nested');
const { getPublishedFiles } = require('./published');
const { resolvePackage } = require('./resolve');
const { getSideFiles } = require('./side_files');
const EXCLUDED_MODULES = new Set(['aws-sdk']);
// When a file requires a module, we find its path inside `node_modules` and
// use all its published files. We also recurse on the module's dependencies.
const getDependencyPathsForDependency = function ({ dependency, basedir, state, packageJson, pluginsModulesPath, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const moduleName = getModuleName(dependency);
        // Happens when doing require("@scope") (not "@scope/name") or other oddities
        // Ignore those.
        if (moduleName === null) {
            return [];
        }
        try {
            return yield getDependenciesForModuleName({ moduleName, basedir, state, pluginsModulesPath });
        }
        catch (error) {
            return handleModuleNotFound({ error, moduleName, packageJson });
        }
    });
};
const getDependenciesForModuleName = function ({ moduleName, basedir, state, pluginsModulesPath }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (isExcludedModule(moduleName)) {
            return [];
        }
        // Find the Node.js module directory path
        const packagePath = yield resolvePackage(moduleName, [basedir, pluginsModulesPath].filter(Boolean));
        if (packagePath === undefined) {
            return [];
        }
        const modulePath = dirname(packagePath);
        if (state.modulePaths.has(modulePath)) {
            return [];
        }
        state.moduleNames.add(moduleName);
        state.modulePaths.add(modulePath);
        // The path depends on the user's build, i.e. must be dynamic
        // eslint-disable-next-line import/no-dynamic-require, node/global-require
        const packageJson = require(packagePath);
        const [publishedFiles, sideFiles, depsPaths] = yield Promise.all([
            getPublishedFiles(modulePath),
            getSideFiles(modulePath, moduleName),
            getNestedModules({ modulePath, state, packageJson, pluginsModulesPath }),
        ]);
        return [...publishedFiles, ...sideFiles, ...depsPaths];
    });
};
const isExcludedModule = function (moduleName) {
    return EXCLUDED_MODULES.has(moduleName) || moduleName.startsWith('@types/');
};
const getNestedModules = function ({ modulePath, state, packageJson, pluginsModulesPath }) {
    return __awaiter(this, void 0, void 0, function* () {
        const dependencies = getNestedDependencies(packageJson);
        const depsPaths = yield Promise.all(dependencies.map((dependency) => getDependencyPathsForDependency({ dependency, basedir: modulePath, state, packageJson, pluginsModulesPath })));
        // TODO: switch to Array.flat() once we drop support for Node.js < 11.0.0
        // eslint-disable-next-line unicorn/prefer-spread
        return [].concat(...depsPaths);
    });
};
module.exports = {
    getDependencyPathsForDependency,
};
//# sourceMappingURL=traverse.js.map