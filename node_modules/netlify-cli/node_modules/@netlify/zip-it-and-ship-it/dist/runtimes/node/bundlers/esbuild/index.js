var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { dirname, normalize } = require('path');
const { getPathWithExtension } = require('../../../../utils/fs');
const { getBasePath } = require('../../utils/base_path');
const { bundleJsFile } = require('./bundler');
const { getExternalAndIgnoredModulesFromSpecialCases } = require('./special_cases');
const { getSrcFiles } = require('./src_files');
const getFunctionBasePath = ({ basePathFromConfig, mainFile, supportingSrcFiles }) => {
    // If there is a base path defined in the config, we use that.
    if (basePathFromConfig !== undefined) {
        return basePathFromConfig;
    }
    // If not, the base path is the common path prefix between all the supporting
    // files and the main file.
    const dirnames = [...supportingSrcFiles, mainFile].map((filePath) => normalize(dirname(filePath)));
    return getBasePath(dirnames);
};
// Convenience method for retrieving external and ignored modules from
// different places and merging them together.
const getExternalAndIgnoredModules = ({ config, srcDir }) => __awaiter(this, void 0, void 0, function* () {
    const { externalNodeModules: externalModulesFromConfig = [], ignoredNodeModules: ignoredModulesFromConfig = [] } = config;
    const { externalModules: externalModulesFromSpecialCases, ignoredModules: ignoredModulesFromSpecialCases } = yield getExternalAndIgnoredModulesFromSpecialCases({ srcDir });
    const externalModules = [...new Set([...externalModulesFromConfig, ...externalModulesFromSpecialCases])];
    const ignoredModules = [...ignoredModulesFromConfig, ...ignoredModulesFromSpecialCases];
    return { externalModules, ignoredModules };
});
const bundle = ({ basePath, config = {}, filename, mainFile, name, pluginsModulesPath, srcDir }) => __awaiter(this, void 0, void 0, function* () {
    const { externalModules, ignoredModules } = yield getExternalAndIgnoredModules({ config, srcDir });
    const { additionalPaths, bundlePaths, cleanTempFiles, inputs, nativeNodeModules = {}, nodeModulesWithDynamicImports, warnings, } = yield bundleJsFile({
        additionalModulePaths: pluginsModulesPath ? [pluginsModulesPath] : [],
        basePath,
        config,
        destFilename: filename,
        externalModules,
        ignoredModules,
        name,
        srcDir,
        srcFile: mainFile,
    });
    const bundlerWarnings = warnings.length === 0 ? undefined : warnings;
    const srcFiles = yield getSrcFiles({
        config: Object.assign(Object.assign({}, config), { externalNodeModules: [...externalModules, ...Object.keys(nativeNodeModules)], includedFiles: [...(config.includedFiles || []), ...additionalPaths], includedFilesBasePath: config.includedFilesBasePath || basePath }),
        mainFile,
        pluginsModulesPath,
        srcDir,
    });
    // We want to remove `mainFile` from `srcFiles` because it represents the
    // path of the original, pre-bundling function file. We'll add the actual
    // bundled file further below.
    const supportingSrcFiles = srcFiles.filter((path) => path !== mainFile);
    const normalizedMainFile = getPathWithExtension(mainFile, '.js');
    const functionBasePath = getFunctionBasePath({ basePathFromConfig: basePath, mainFile, supportingSrcFiles });
    return {
        aliases: bundlePaths,
        cleanupFunction: cleanTempFiles,
        basePath: functionBasePath,
        bundlerWarnings,
        inputs,
        mainFile: normalizedMainFile,
        nativeNodeModules,
        nodeModulesWithDynamicImports,
        srcFiles: [...supportingSrcFiles, ...bundlePaths.keys()],
    };
});
module.exports = { bundle, getSrcFiles };
//# sourceMappingURL=index.js.map