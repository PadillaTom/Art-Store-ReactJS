var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
const { join } = require('path');
const cpFile = require('cp-file');
const { JS_BUNDLER_ESBUILD, JS_BUNDLER_ESBUILD_ZISI, JS_BUNDLER_ZISI, RUNTIME_JS } = require('../../utils/consts');
const { getBundler } = require('./bundlers');
const { findFunctionsInPaths } = require('./finder');
const { detectEsModule } = require('./utils/detect_es_module');
const { zipNodeJs } = require('./utils/zip');
// We use ZISI as the default bundler, except for certain extensions, for which
// esbuild is the only option.
const getDefaultBundler = ({ extension, mainFile, featureFlags = {} }) => __awaiter(this, void 0, void 0, function* () {
    if (['.mjs', '.ts'].includes(extension)) {
        return JS_BUNDLER_ESBUILD;
    }
    if (featureFlags.defaultEsModulesToEsbuild) {
        const isEsModule = yield detectEsModule({ mainFile });
        if (isEsModule) {
            return JS_BUNDLER_ESBUILD;
        }
    }
    return JS_BUNDLER_ZISI;
});
// A proxy for the `getSrcFiles` function which adds a default `bundler` using
// the `getDefaultBundler` function.
const getSrcFilesWithBundler = (parameters) => __awaiter(this, void 0, void 0, function* () {
    const bundlerName = parameters.config.nodeBundler || (yield getDefaultBundler({ extension: parameters.extension }));
    const bundler = getBundler(bundlerName);
    return bundler.getSrcFiles(Object.assign({}, parameters));
});
const zipFunction = function ({ archiveFormat, basePath, config = {}, destFolder, extension, featureFlags, filename, mainFile, name, pluginsModulesPath, srcDir, srcPath, stat, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const bundlerName = config.nodeBundler || (yield getDefaultBundler({ extension, mainFile, featureFlags }));
        const bundler = getBundler(bundlerName);
        // If the file is a zip, we assume the function is bundled and ready to go.
        // We simply copy it to the destination path with no further processing.
        if (extension === '.zip') {
            const destPath = join(destFolder, filename);
            yield cpFile(srcPath, destPath);
            return { config, path: destPath };
        }
        const { aliases, cleanupFunction = () => { }, basePath: finalBasePath = basePath, bundlerWarnings, inputs, mainFile: finalMainFile = mainFile, nativeNodeModules, nodeModulesWithDynamicImports, srcFiles, } = yield bundler.bundle({
            basePath,
            config,
            extension,
            featureFlags,
            filename,
            mainFile,
            name,
            pluginsModulesPath,
            srcDir,
            srcPath,
            stat,
        });
        const zipPath = yield zipNodeJs({
            aliases,
            archiveFormat,
            basePath: finalBasePath,
            destFolder,
            extension,
            filename,
            mainFile: finalMainFile,
            pluginsModulesPath,
            srcFiles,
        });
        yield cleanupFunction();
        return {
            bundler: bundlerName,
            bundlerWarnings,
            config,
            inputs,
            nativeNodeModules,
            nodeModulesWithDynamicImports,
            path: zipPath,
        };
    });
};
const zipWithFunctionWithFallback = (_a) => __awaiter(this, void 0, void 0, function* () {
    var { config = {} } = _a, parameters = __rest(_a, ["config"]);
    // If a specific JS bundler version is specified, we'll use it.
    if (config.nodeBundler !== JS_BUNDLER_ESBUILD_ZISI) {
        return zipFunction(Object.assign(Object.assign({}, parameters), { config }));
    }
    // Otherwise, we'll try to bundle with esbuild and, if that fails, fallback
    // to zisi.
    try {
        return yield zipFunction(Object.assign(Object.assign({}, parameters), { config: Object.assign(Object.assign({}, config), { nodeBundler: JS_BUNDLER_ESBUILD }) }));
    }
    catch (esbuildError) {
        try {
            const data = yield zipFunction(Object.assign(Object.assign({}, parameters), { config: Object.assign(Object.assign({}, config), { nodeBundler: JS_BUNDLER_ZISI }) }));
            return Object.assign(Object.assign({}, data), { bundlerErrors: esbuildError.errors });
        }
        catch (zisiError) {
            throw esbuildError;
        }
    }
});
module.exports = {
    findFunctionsInPaths,
    getSrcFiles: getSrcFilesWithBundler,
    name: RUNTIME_JS,
    zipFunction: zipWithFunctionWithFallback,
};
//# sourceMappingURL=index.js.map